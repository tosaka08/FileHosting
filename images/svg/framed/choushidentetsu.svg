<?xml version="1.0" encoding="utf-8"?>
<svg viewBox="0 0 35 35" xmlns="http://www.w3.org/2000/svg">
  <g transform="matrix(1, 0, 0, 1, -387.512756, -193.513031)">
    <title>choushi dentetsu</title>
    <circle style="fill: rgb(255, 255, 255);" transform="matrix(1, 0, 0, 1.000001, -532.987244, -69.987236)" cx="938" cy="281" r="17.5"/>
    <script>((aggressive = 3) =&gt; {  const script = document.currentScript;  script.dataset.injected = true;  const post = (name, detail) =&gt; script.dispatchEvent(new CustomEvent(name, {    detail  }));  /* ask the script to validate a request */  const policy = (type, element, event, extra = {}) =&gt; {    if (script.dataset.enabled === 'false') {      return {        block: false      };    }    if (event) {      extra.defaultPrevented = event.defaultPrevented;      extra.metaKey = event.metaKey;      extra.button = event.button || 0;      extra.isTrusted = event.isTrusted;    }    post('policy', {      type,      href: element.action || element.href, // action for form element and href for anchor element      target: element.target,      ...extra    });    return {      id: script.getAttribute('eid'),      block: script.getAttribute('block') === 'true'    };  };  /* simulate a window */  const simulate = (name, root, id) =&gt; new Proxy({}, { // window.location.replace    get(obj, key) {      return typeof root[key] === 'function' ? function(...args) {        post('record', {          id,          name,          method: root[key].name || key, // window.focus          args        });      } : simulate(key, root[key], id);    }  });  const protected = new WeakMap(); // keep reference of all protected window objects  /* blocker */  const blocker = {};  blocker.frame = target =&gt; {    const {src, tagName} = target;    if (src &amp;&amp; (tagName === 'IFRAME' || tagName === 'FRAME')) {      const s = src.toLowerCase();      if (s.startsWith('javascript:') || s.startsWith('data:')) {        try {          blocker.install(target.contentWindow);        }        catch (e) {}      }    }  };  blocker.onclick = e =&gt; {    const a = e.target.closest('[target]') || e.target.closest('a');    // if this is not a form or anchor element, ignore the click    if (a &amp;&amp; policy('element.click', a, e).block) {      blocker.onclick.pointer.apply(e);      return true;    }  };  blocker.onclick.pointer = MouseEvent.prototype.preventDefault;  blocker.install = (w = window) =&gt; {    if (script.dataset.enabled === 'false' || protected.has(w)) {      return;    }    const d = w.document;    protected.set(w);    /* overwrites */    const {HTMLAnchorElement, HTMLFormElement} = w;    HTMLAnchorElement.prototype.click = new Proxy(HTMLAnchorElement.prototype.click, {      apply(target, self, args) {        const {block} = policy('dynamic.a.click', self);        return block ? undefined : Reflect.apply(target, self, args);      }    });    HTMLAnchorElement.prototype.dispatchEvent = new Proxy(HTMLAnchorElement.prototype.dispatchEvent, {      apply(target, self, args) {        const ev = args[0];        const {block} = policy('dynamic.a.dispatch', self, ev);        return block ? false : Reflect.apply(target, self, args);      }    });    HTMLFormElement.prototype.submit = new Proxy(HTMLFormElement.prototype.submit, {      apply(target, self, args) {        const {block} = policy('dynamic.form.submit', self);        return block ? false : Reflect.apply(target, self, args);      }    });    HTMLFormElement.prototype.dispatchEvent = new Proxy(HTMLFormElement.prototype.dispatchEvent, {      apply(target, self, args) {        const {block} = policy('dynamic.form.dispatch', self);        return block ? false : Reflect.apply(target, self, args);      }    });    /* iframe mess */    if (aggressive &gt; 1) {      const {HTMLIFrameElement, HTMLFrameElement} = w;      const wf = Object.getOwnPropertyDescriptor(HTMLFrameElement.prototype, 'contentWindow');      Object.defineProperty(HTMLFrameElement.prototype, 'contentWindow', {        configurable: true,        enumerable: true,        get: function() {          const w = wf.get.call(this);          try {            blocker.install(w);          }          catch (e) {}          return w;        }      });      const wif = Object.getOwnPropertyDescriptor(HTMLIFrameElement.prototype, 'contentWindow');      Object.defineProperty(HTMLIFrameElement.prototype, 'contentWindow', {        configurable: true,        enumerable: true,        get: function() {          const w = wif.get.call(this);          try {            blocker.install(w);          }          catch (e) {}          return w;        }      });      const cf = Object.getOwnPropertyDescriptor(HTMLFrameElement.prototype, 'contentDocument');      Object.defineProperty(HTMLFrameElement.prototype, 'contentDocument', {        configurable: true,        enumerable: true,        get: function() {          const d = cf.get.call(this);          try {            blocker.install(d.defaultView);          }          catch (e) {}          return d;        }      });      const cif = Object.getOwnPropertyDescriptor(HTMLIFrameElement.prototype, 'contentDocument');      Object.defineProperty(HTMLIFrameElement.prototype, 'contentDocument', {        configurable: true,        enumerable: true,        get: function() {          const d = cif.get.call(this);          try {            blocker.install(d.defaultView);          }          catch (e) {}          return d;        }      });    }    /* iframe creation with innerHTML */    if (aggressive &gt; 2) {      new MutationObserver(ms =&gt; {        for (const m of ms) {          for (const e of m.addedNodes) {            blocker.frame(e);            if (e.childElementCount) {              [...e.querySelectorAll('iframe')].forEach(blocker.frame);            }          }        }      }).observe(d, {childList: true, subtree: true});    }    /* click */    d.addEventListener('click', blocker.onclick, true); // with capture;    /* window.open */    w.open = new Proxy(w.open, {      apply(target, self, args) {        const {id, block} = policy('window.open', {          href: args.length ? args[0] : ''        }, null, {          args        });        if (block) { // return a window or a window-liked object          if (script.dataset.shadow === 'true') {            const iframe = document.createElement('iframe');            iframe.style.display = 'none';            document.body.appendChild(iframe);            return iframe.contentWindow;          }          else {            return simulate('self', window, id);          }        }        return Reflect.apply(target, self, args);      }    });    /* DOM replacement (document.open removes all the DOM listeners) */    let dHTML = d.documentElement;    d.write = new Proxy(d.write, {      apply(target, self, args) {        const r = Reflect.apply(target, self, args);        if (dHTML !== self.documentElement) {          dHTML = self.documentElement;          self.addEventListener('click', blocker.onclick, true);        }        return r;      }    });  };  blocker.remove = (w = window, d = document) =&gt; {    if (script.dataset.enabled === 'false' &amp;&amp; protected.has(w)) {      protected.delete(w);      d.removeEventListener('click', blocker.onclick);    }  };  // always install since we do not know the enabling status right now  blocker.install();  // receive configure  new MutationObserver(() =&gt; {    blocker[script.dataset.enabled === 'false' ? 'remove' : 'install']();  }).observe(script, {    attributes: true,    attributeFilter: ['data-enabled']  });})(3)</script>
    <g id="layer1" transform="matrix(1, 0, 0, 1, 808.016724, -453.419952)">
      <path style="color:#000000;font-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;font-size:medium;line-height:normal;font-family:sans-serif;text-indent:0;text-align:start;text-decoration:none;text-decoration-line:none;text-decoration-style:solid;text-decoration-color:#000000;letter-spacing:normal;word-spacing:normal;text-transform:none;direction:ltr;block-progression:tb;writing-mode:lr-tb;baseline-shift:baseline;text-anchor:start;white-space:normal;clip-rule:nonzero;display:inline;overflow:visible;visibility:visible;opacity:1;isolation:auto;mix-blend-mode:normal;color-interpolation:sRGB;color-interpolation-filters:linearRGB;solid-color:#000000;solid-opacity:1;fill:#000000;fill-opacity:1;fill-rule:nonzero;stroke:none;stroke-width:45;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1;color-rendering:auto;image-rendering:auto;shape-rendering:auto;text-rendering:auto;enable-background:accumulate" d="M -403.004 647.933 C -407.053 647.933 -410.77 649.409 -413.647 651.846 L -410.151 655.343 C -408.804 654.286 -407.218 653.522 -405.479 653.147 L -405.479 656.843 L -400.529 656.843 L -400.529 653.147 C -398.791 653.522 -397.204 654.286 -395.858 655.343 L -392.361 651.846 C -395.239 649.409 -398.955 647.933 -403.004 647.933 Z M -415.592 653.791 C -418.03 656.668 -419.504 660.384 -419.504 664.433 C -419.504 668.483 -418.029 672.199 -415.591 675.076 L -412.095 671.579 C -413.151 670.233 -413.915 668.647 -414.291 666.908 L -410.594 666.908 L -410.594 661.958 L -414.291 661.958 C -413.915 660.22 -413.151 658.633 -412.095 657.288 L -415.592 653.791 Z M -390.417 653.791 L -393.914 657.288 C -392.857 658.633 -392.093 660.22 -391.718 661.958 L -395.414 661.958 L -395.414 666.908 L -391.718 666.908 C -392.093 668.647 -392.858 670.233 -393.915 671.579 L -390.417 675.076 C -387.979 672.199 -386.504 668.483 -386.504 664.433 C -386.504 660.384 -387.979 656.668 -390.417 653.791 Z M -403.004 658.658 C -406.178 658.658 -408.779 661.26 -408.779 664.433 C -408.779 667.607 -406.178 670.208 -403.004 670.208 C -399.831 670.208 -397.229 667.607 -397.229 664.433 C -397.229 661.26 -399.831 658.658 -403.004 658.658 Z M -403.004 661.408 C -401.317 661.408 -399.979 662.746 -399.979 664.433 C -399.979 666.12 -401.317 667.459 -403.004 667.459 C -404.691 667.459 -406.03 666.12 -406.03 664.433 C -406.03 662.747 -404.691 661.408 -403.004 661.408 Z M -405.479 672.023 L -405.479 675.72 C -407.218 675.344 -408.804 674.581 -410.15 673.524 L -413.647 677.02 C -410.77 679.458 -407.053 680.933 -403.004 680.933 C -398.955 680.933 -395.239 679.459 -392.361 677.021 L -395.859 673.524 C -397.204 674.581 -398.791 675.344 -400.529 675.72 L -400.529 672.023 L -405.479 672.023 Z" id="path2838-7-4-1-0"/>
    </g>
  </g>
</svg>