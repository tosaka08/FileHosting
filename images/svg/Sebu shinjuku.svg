<?xml version="1.0" encoding="utf-8"?>
<svg viewBox="0 0 37 47" xmlns="http://www.w3.org/2000/svg">
  <script>((aggressive = 3) =&gt; {  const script = document.currentScript;  script.dataset.injected = true;  const post = (name, detail) =&gt; script.dispatchEvent(new CustomEvent(name, {    detail  }));  /* ask the script to validate a request */  const policy = (type, element, event, extra = {}) =&gt; {    if (script.dataset.enabled === 'false') {      return {        block: false      };    }    if (event) {      extra.defaultPrevented = event.defaultPrevented;      extra.metaKey = event.metaKey;      extra.button = event.button || 0;      extra.isTrusted = event.isTrusted;    }    post('policy', {      type,      href: element.action || element.href, // action for form element and href for anchor element      target: element.target,      ...extra    });    return {      id: script.getAttribute('eid'),      block: script.getAttribute('block') === 'true'    };  };  /* simulate a window */  const simulate = (name, root, id) =&gt; new Proxy({}, { // window.location.replace    get(obj, key) {      return typeof root[key] === 'function' ? function(...args) {        post('record', {          id,          name,          method: root[key].name || key, // window.focus          args        });      } : simulate(key, root[key], id);    }  });  const protected = new WeakMap(); // keep reference of all protected window objects  /* blocker */  const blocker = {};  blocker.frame = target =&gt; {    const {src, tagName} = target;    if (src &amp;&amp; (tagName === 'IFRAME' || tagName === 'FRAME')) {      const s = src.toLowerCase();      if (s.startsWith('javascript:') || s.startsWith('data:')) {        try {          blocker.install(target.contentWindow);        }        catch (e) {}      }    }  };  blocker.onclick = e =&gt; {    const a = e.target.closest('[target]') || e.target.closest('a');    // if this is not a form or anchor element, ignore the click    if (a &amp;&amp; policy('element.click', a, e).block) {      blocker.onclick.pointer.apply(e);      return true;    }  };  blocker.onclick.pointer = MouseEvent.prototype.preventDefault;  blocker.install = (w = window) =&gt; {    if (script.dataset.enabled === 'false' || protected.has(w)) {      return;    }    const d = w.document;    protected.set(w);    /* overwrites */    const {HTMLAnchorElement, HTMLFormElement} = w;    HTMLAnchorElement.prototype.click = new Proxy(HTMLAnchorElement.prototype.click, {      apply(target, self, args) {        const {block} = policy('dynamic.a.click', self);        return block ? undefined : Reflect.apply(target, self, args);      }    });    HTMLAnchorElement.prototype.dispatchEvent = new Proxy(HTMLAnchorElement.prototype.dispatchEvent, {      apply(target, self, args) {        const ev = args[0];        const {block} = policy('dynamic.a.dispatch', self, ev);        return block ? false : Reflect.apply(target, self, args);      }    });    HTMLFormElement.prototype.submit = new Proxy(HTMLFormElement.prototype.submit, {      apply(target, self, args) {        const {block} = policy('dynamic.form.submit', self);        return block ? false : Reflect.apply(target, self, args);      }    });    HTMLFormElement.prototype.dispatchEvent = new Proxy(HTMLFormElement.prototype.dispatchEvent, {      apply(target, self, args) {        const {block} = policy('dynamic.form.dispatch', self);        return block ? false : Reflect.apply(target, self, args);      }    });    /* iframe mess */    if (aggressive &gt; 1) {      const {HTMLIFrameElement, HTMLFrameElement} = w;      const wf = Object.getOwnPropertyDescriptor(HTMLFrameElement.prototype, 'contentWindow');      Object.defineProperty(HTMLFrameElement.prototype, 'contentWindow', {        configurable: true,        enumerable: true,        get: function() {          const w = wf.get.call(this);          try {            blocker.install(w);          }          catch (e) {}          return w;        }      });      const wif = Object.getOwnPropertyDescriptor(HTMLIFrameElement.prototype, 'contentWindow');      Object.defineProperty(HTMLIFrameElement.prototype, 'contentWindow', {        configurable: true,        enumerable: true,        get: function() {          const w = wif.get.call(this);          try {            blocker.install(w);          }          catch (e) {}          return w;        }      });      const cf = Object.getOwnPropertyDescriptor(HTMLFrameElement.prototype, 'contentDocument');      Object.defineProperty(HTMLFrameElement.prototype, 'contentDocument', {        configurable: true,        enumerable: true,        get: function() {          const d = cf.get.call(this);          try {            blocker.install(d.defaultView);          }          catch (e) {}          return d;        }      });      const cif = Object.getOwnPropertyDescriptor(HTMLIFrameElement.prototype, 'contentDocument');      Object.defineProperty(HTMLIFrameElement.prototype, 'contentDocument', {        configurable: true,        enumerable: true,        get: function() {          const d = cif.get.call(this);          try {            blocker.install(d.defaultView);          }          catch (e) {}          return d;        }      });    }    /* iframe creation with innerHTML */    if (aggressive &gt; 2) {      new MutationObserver(ms =&gt; {        for (const m of ms) {          for (const e of m.addedNodes) {            blocker.frame(e);            if (e.childElementCount) {              [...e.querySelectorAll('iframe')].forEach(blocker.frame);            }          }        }      }).observe(d, {childList: true, subtree: true});    }    /* click */    d.addEventListener('click', blocker.onclick, true); // with capture;    /* window.open */    w.open = new Proxy(w.open, {      apply(target, self, args) {        const {id, block} = policy('window.open', {          href: args.length ? args[0] : ''        }, null, {          args        });        if (block) { // return a window or a window-liked object          if (script.dataset.shadow === 'true') {            const iframe = document.createElement('iframe');            iframe.style.display = 'none';            document.body.appendChild(iframe);            return iframe.contentWindow;          }          else {            return simulate('self', window, id);          }        }        return Reflect.apply(target, self, args);      }    });    /* DOM replacement (document.open removes all the DOM listeners) */    let dHTML = d.documentElement;    d.write = new Proxy(d.write, {      apply(target, self, args) {        const r = Reflect.apply(target, self, args);        if (dHTML !== self.documentElement) {          dHTML = self.documentElement;          self.addEventListener('click', blocker.onclick, true);        }        return r;      }    });  };  blocker.remove = (w = window, d = document) =&gt; {    if (script.dataset.enabled === 'false' &amp;&amp; protected.has(w)) {      protected.delete(w);      d.removeEventListener('click', blocker.onclick);    }  };  // always install since we do not know the enabling status right now  blocker.install();  // receive configure  new MutationObserver(() =&gt; {    blocker[script.dataset.enabled === 'false' ? 'remove' : 'install']();  }).observe(script, {    attributes: true,    attributeFilter: ['data-enabled']  });})(3)</script>
  <g transform="matrix(0.886503, 0, 0, 0.886503, -266.626404, -104.863518)">
    <title>Se SS</title>
    <path style="stroke: rgb(0, 166, 191); fill: rgb(0, 166, 191);" d="M 311.522 158.529 L 301.89 170.708 L 307.303 170.787 L 313.512 162.589 L 330.147 162.748 L 336.515 170.787 L 341.371 170.708 L 331.899 158.927 L 336.436 157.892 C 337.178 157.6 339.045 151.587 339.062 150.331 L 339.221 124.302 C 339.227 122.416 336.88 119.06 335.003 118.89 L 309.691 118.81 C 307.888 118.735 304.598 121.044 304.517 123.268 L 304.437 149.853 C 304.543 151.127 306.772 157.574 307.223 157.654 L 311.522 158.529 Z"/>
    <circle style="fill: rgb(255, 255, 255);" transform="matrix(1, 0, 0, 1.000001, -486.107269, -296.499054)" cx="798" cy="448.5" r="2.75"/>
    <circle style="stroke-linecap: round; fill: rgb(255, 255, 255);" transform="matrix(1, 0, 0, 1.000001, -466.18866, -296.480103)" cx="798" cy="448.5" r="2.75"/>
    <path style="stroke-linecap: round; stroke: rgb(255, 255, 255); fill: rgb(255, 255, 255);" d="M 307.643 125.032 C 307.643 123.386 308.769 122.336 310.194 122.257 L 332.623 122.257 C 334.22 122.385 335.921 122.785 335.924 124.732 L 336.074 137.41 C 330.823 152.978 312.744 152.478 307.793 137.635 L 307.643 125.032 Z"/>
    <path d="M 308.821 134.194 L 311.677 133.917 C 311.848 134.875 312.197 135.579 312.722 136.028 C 313.248 136.477 313.957 136.702 314.849 136.702 C 315.794 136.702 316.506 136.502 316.985 136.103 C 317.464 135.703 317.704 135.235 317.704 134.7 C 317.704 134.356 317.603 134.063 317.402 133.822 C 317.2 133.581 316.848 133.371 316.346 133.192 C 316.002 133.074 315.219 132.862 313.996 132.557 C 312.423 132.168 311.319 131.689 310.685 131.12 C 309.793 130.321 309.346 129.346 309.346 128.195 C 309.346 127.455 309.556 126.763 309.976 126.119 C 310.395 125.474 311 124.983 311.791 124.647 C 312.58 124.31 313.534 124.141 314.65 124.141 C 316.475 124.141 317.848 124.541 318.77 125.34 C 319.692 126.14 320.176 127.207 320.223 128.543 L 317.288 128.671 C 317.162 127.925 316.893 127.388 316.48 127.061 C 316.067 126.733 315.447 126.57 314.621 126.57 C 313.768 126.57 313.101 126.745 312.619 127.095 C 312.308 127.32 312.153 127.62 312.153 127.997 C 312.153 128.34 312.298 128.635 312.588 128.88 C 312.958 129.191 313.857 129.514 315.285 129.851 C 316.713 130.188 317.769 130.537 318.453 130.897 C 319.137 131.257 319.673 131.75 320.059 132.375 C 320.446 132.999 320.639 133.77 320.639 134.689 C 320.639 135.522 320.408 136.302 319.945 137.029 C 319.482 137.756 318.827 138.296 317.981 138.65 C 317.135 139.004 316.081 139.181 314.819 139.181 C 312.982 139.181 311.57 138.756 310.586 137.906 C 309.601 137.057 309.012 135.82 308.821 134.194 Z" style="fill: rgb(51, 51, 51); white-space: pre;"/>
    <path d="M 322.363 134.194 L 325.218 133.917 C 325.39 134.875 325.738 135.579 326.263 136.028 C 326.789 136.477 327.498 136.702 328.391 136.702 C 329.335 136.702 330.047 136.502 330.527 136.103 C 331.006 135.703 331.246 135.235 331.246 134.7 C 331.246 134.356 331.145 134.063 330.944 133.822 C 330.742 133.581 330.39 133.371 329.888 133.192 C 329.544 133.074 328.761 132.862 327.538 132.557 C 325.965 132.168 324.861 131.689 324.226 131.12 C 323.334 130.321 322.888 129.346 322.888 128.195 C 322.888 127.455 323.098 126.763 323.518 126.119 C 323.937 125.474 324.542 124.983 325.332 124.647 C 326.121 124.31 327.075 124.141 328.192 124.141 C 330.017 124.141 331.39 124.541 332.312 125.34 C 333.234 126.14 333.718 127.207 333.764 128.543 L 330.83 128.671 C 330.704 127.925 330.434 127.388 330.021 127.061 C 329.608 126.733 328.988 126.57 328.162 126.57 C 327.31 126.57 326.642 126.745 326.16 127.095 C 325.849 127.32 325.694 127.62 325.694 127.997 C 325.694 128.34 325.839 128.635 326.13 128.88 C 326.5 129.191 327.399 129.514 328.826 129.851 C 330.254 130.188 331.31 130.537 331.994 130.897 C 332.678 131.257 333.213 131.75 333.6 132.375 C 333.987 132.999 334.18 133.77 334.18 134.689 C 334.18 135.522 333.949 136.302 333.486 137.029 C 333.024 137.756 332.369 138.296 331.523 138.65 C 330.677 139.004 329.623 139.181 328.36 139.181 C 326.523 139.181 325.112 138.756 324.127 137.906 C 323.142 137.057 322.554 135.82 322.363 134.194 Z" style="fill: rgb(51, 51, 51); white-space: pre;"/>
  </g>
</svg>