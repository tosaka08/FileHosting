<?xml version="1.0" encoding="utf-8"?>
<svg viewBox="0 0 37 47" xmlns="http://www.w3.org/2000/svg">
  <script>((aggressive = 3) =&gt; {  const script = document.currentScript;  script.dataset.injected = true;  const post = (name, detail) =&gt; script.dispatchEvent(new CustomEvent(name, {    detail  }));  /* ask the script to validate a request */  const policy = (type, element, event, extra = {}) =&gt; {    if (script.dataset.enabled === 'false') {      return {        block: false      };    }    if (event) {      extra.defaultPrevented = event.defaultPrevented;      extra.metaKey = event.metaKey;      extra.button = event.button || 0;      extra.isTrusted = event.isTrusted;    }    post('policy', {      type,      href: element.action || element.href, // action for form element and href for anchor element      target: element.target,      ...extra    });    return {      id: script.getAttribute('eid'),      block: script.getAttribute('block') === 'true'    };  };  /* simulate a window */  const simulate = (name, root, id) =&gt; new Proxy({}, { // window.location.replace    get(obj, key) {      return typeof root[key] === 'function' ? function(...args) {        post('record', {          id,          name,          method: root[key].name || key, // window.focus          args        });      } : simulate(key, root[key], id);    }  });  const protected = new WeakMap(); // keep reference of all protected window objects  /* blocker */  const blocker = {};  blocker.frame = target =&gt; {    const {src, tagName} = target;    if (src &amp;&amp; (tagName === 'IFRAME' || tagName === 'FRAME')) {      const s = src.toLowerCase();      if (s.startsWith('javascript:') || s.startsWith('data:')) {        try {          blocker.install(target.contentWindow);        }        catch (e) {}      }    }  };  blocker.onclick = e =&gt; {    const a = e.target.closest('[target]') || e.target.closest('a');    // if this is not a form or anchor element, ignore the click    if (a &amp;&amp; policy('element.click', a, e).block) {      blocker.onclick.pointer.apply(e);      return true;    }  };  blocker.onclick.pointer = MouseEvent.prototype.preventDefault;  blocker.install = (w = window) =&gt; {    if (script.dataset.enabled === 'false' || protected.has(w)) {      return;    }    const d = w.document;    protected.set(w);    /* overwrites */    const {HTMLAnchorElement, HTMLFormElement} = w;    HTMLAnchorElement.prototype.click = new Proxy(HTMLAnchorElement.prototype.click, {      apply(target, self, args) {        const {block} = policy('dynamic.a.click', self);        return block ? undefined : Reflect.apply(target, self, args);      }    });    HTMLAnchorElement.prototype.dispatchEvent = new Proxy(HTMLAnchorElement.prototype.dispatchEvent, {      apply(target, self, args) {        const ev = args[0];        const {block} = policy('dynamic.a.dispatch', self, ev);        return block ? false : Reflect.apply(target, self, args);      }    });    HTMLFormElement.prototype.submit = new Proxy(HTMLFormElement.prototype.submit, {      apply(target, self, args) {        const {block} = policy('dynamic.form.submit', self);        return block ? false : Reflect.apply(target, self, args);      }    });    HTMLFormElement.prototype.dispatchEvent = new Proxy(HTMLFormElement.prototype.dispatchEvent, {      apply(target, self, args) {        const {block} = policy('dynamic.form.dispatch', self);        return block ? false : Reflect.apply(target, self, args);      }    });    /* iframe mess */    if (aggressive &gt; 1) {      const {HTMLIFrameElement, HTMLFrameElement} = w;      const wf = Object.getOwnPropertyDescriptor(HTMLFrameElement.prototype, 'contentWindow');      Object.defineProperty(HTMLFrameElement.prototype, 'contentWindow', {        configurable: true,        enumerable: true,        get: function() {          const w = wf.get.call(this);          try {            blocker.install(w);          }          catch (e) {}          return w;        }      });      const wif = Object.getOwnPropertyDescriptor(HTMLIFrameElement.prototype, 'contentWindow');      Object.defineProperty(HTMLIFrameElement.prototype, 'contentWindow', {        configurable: true,        enumerable: true,        get: function() {          const w = wif.get.call(this);          try {            blocker.install(w);          }          catch (e) {}          return w;        }      });      const cf = Object.getOwnPropertyDescriptor(HTMLFrameElement.prototype, 'contentDocument');      Object.defineProperty(HTMLFrameElement.prototype, 'contentDocument', {        configurable: true,        enumerable: true,        get: function() {          const d = cf.get.call(this);          try {            blocker.install(d.defaultView);          }          catch (e) {}          return d;        }      });      const cif = Object.getOwnPropertyDescriptor(HTMLIFrameElement.prototype, 'contentDocument');      Object.defineProperty(HTMLIFrameElement.prototype, 'contentDocument', {        configurable: true,        enumerable: true,        get: function() {          const d = cif.get.call(this);          try {            blocker.install(d.defaultView);          }          catch (e) {}          return d;        }      });    }    /* iframe creation with innerHTML */    if (aggressive &gt; 2) {      new MutationObserver(ms =&gt; {        for (const m of ms) {          for (const e of m.addedNodes) {            blocker.frame(e);            if (e.childElementCount) {              [...e.querySelectorAll('iframe')].forEach(blocker.frame);            }          }        }      }).observe(d, {childList: true, subtree: true});    }    /* click */    d.addEventListener('click', blocker.onclick, true); // with capture;    /* window.open */    w.open = new Proxy(w.open, {      apply(target, self, args) {        const {id, block} = policy('window.open', {          href: args.length ? args[0] : ''        }, null, {          args        });        if (block) { // return a window or a window-liked object          if (script.dataset.shadow === 'true') {            const iframe = document.createElement('iframe');            iframe.style.display = 'none';            document.body.appendChild(iframe);            return iframe.contentWindow;          }          else {            return simulate('self', window, id);          }        }        return Reflect.apply(target, self, args);      }    });    /* DOM replacement (document.open removes all the DOM listeners) */    let dHTML = d.documentElement;    d.write = new Proxy(d.write, {      apply(target, self, args) {        const r = Reflect.apply(target, self, args);        if (dHTML !== self.documentElement) {          dHTML = self.documentElement;          self.addEventListener('click', blocker.onclick, true);        }        return r;      }    });  };  blocker.remove = (w = window, d = document) =&gt; {    if (script.dataset.enabled === 'false' &amp;&amp; protected.has(w)) {      protected.delete(w);      d.removeEventListener('click', blocker.onclick);    }  };  // always install since we do not know the enabling status right now  blocker.install();  // receive configure  new MutationObserver(() =&gt; {    blocker[script.dataset.enabled === 'false' ? 'remove' : 'install']();  }).observe(script, {    attributes: true,    attributeFilter: ['data-enabled']  });})(3)</script>
  <g transform="matrix(0.886503, 0, 0, 0.886503, -266.626404, -104.863518)">
    <title>Se SI</title>
    <path style="stroke: rgb(238, 122, 0); fill: rgb(238, 122, 0);" d="M 311.522 158.529 L 301.89 170.708 L 307.303 170.787 L 313.512 162.589 L 330.147 162.748 L 336.515 170.787 L 341.371 170.708 L 331.899 158.927 L 336.436 157.892 C 337.178 157.6 339.045 151.587 339.062 150.331 L 339.221 124.302 C 339.227 122.416 336.88 119.06 335.003 118.89 L 309.691 118.81 C 307.888 118.735 304.598 121.044 304.517 123.268 L 304.437 149.853 C 304.543 151.127 306.772 157.574 307.223 157.654 L 311.522 158.529 Z"/>
    <circle style="fill: rgb(255, 255, 255);" transform="matrix(1, 0, 0, 1.000001, -486.107269, -296.499054)" cx="798" cy="448.5" r="2.75"/>
    <circle style="stroke-linecap: round; fill: rgb(255, 255, 255);" transform="matrix(1, 0, 0, 1.000001, -466.18866, -296.480103)" cx="798" cy="448.5" r="2.75"/>
    <path style="stroke-linecap: round; stroke: rgb(255, 255, 255); fill: rgb(255, 255, 255);" d="M 307.643 125.032 C 307.643 123.386 308.769 122.336 310.194 122.257 L 332.623 122.257 C 334.22 122.385 335.921 122.785 335.924 124.732 L 336.074 137.41 C 330.823 152.978 312.744 152.478 307.793 137.635 L 307.643 125.032 Z"/>
    <path d="M 312.882 135.684 L 315.729 135.407 Q 315.986 136.84 316.773 137.513 Q 317.559 138.185 318.893 138.185 Q 320.307 138.185 321.024 137.587 Q 321.741 136.989 321.741 136.188 Q 321.741 135.674 321.44 135.313 Q 321.138 134.952 320.386 134.685 Q 319.872 134.507 318.043 134.052 Q 315.69 133.469 314.741 132.618 Q 313.406 131.422 313.406 129.702 Q 313.406 128.594 314.034 127.63 Q 314.661 126.666 315.843 126.162 Q 317.025 125.657 318.696 125.657 Q 321.425 125.657 322.804 126.854 Q 324.183 128.05 324.253 130.048 L 321.326 130.176 Q 321.138 129.059 320.52 128.569 Q 319.902 128.08 318.666 128.08 Q 317.391 128.08 316.669 128.604 Q 316.204 128.94 316.204 129.504 Q 316.204 130.018 316.639 130.384 Q 317.193 130.848 319.328 131.353 Q 321.464 131.857 322.488 132.396 Q 323.511 132.935 324.089 133.869 Q 324.668 134.804 324.668 136.178 Q 324.668 137.424 323.976 138.511 Q 323.284 139.599 322.018 140.128 Q 320.752 140.657 318.864 140.657 Q 316.115 140.657 314.642 139.387 Q 313.168 138.116 312.882 135.684 Z M 327.039 140.4 L 327.039 125.905 L 329.966 125.905 L 329.966 140.4 Z" style="fill: rgb(51, 51, 51); white-space: pre;"/>
  </g>
</svg>