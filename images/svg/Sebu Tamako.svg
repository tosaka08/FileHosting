<?xml version="1.0" encoding="utf-8"?>
<svg viewBox="0 0 37 47" xmlns="http://www.w3.org/2000/svg">
  <script>((aggressive = 3) =&gt; {  const script = document.currentScript;  script.dataset.injected = true;  const post = (name, detail) =&gt; script.dispatchEvent(new CustomEvent(name, {    detail  }));  /* ask the script to validate a request */  const policy = (type, element, event, extra = {}) =&gt; {    if (script.dataset.enabled === 'false') {      return {        block: false      };    }    if (event) {      extra.defaultPrevented = event.defaultPrevented;      extra.metaKey = event.metaKey;      extra.button = event.button || 0;      extra.isTrusted = event.isTrusted;    }    post('policy', {      type,      href: element.action || element.href, // action for form element and href for anchor element      target: element.target,      ...extra    });    return {      id: script.getAttribute('eid'),      block: script.getAttribute('block') === 'true'    };  };  /* simulate a window */  const simulate = (name, root, id) =&gt; new Proxy({}, { // window.location.replace    get(obj, key) {      return typeof root[key] === 'function' ? function(...args) {        post('record', {          id,          name,          method: root[key].name || key, // window.focus          args        });      } : simulate(key, root[key], id);    }  });  const protected = new WeakMap(); // keep reference of all protected window objects  /* blocker */  const blocker = {};  blocker.frame = target =&gt; {    const {src, tagName} = target;    if (src &amp;&amp; (tagName === 'IFRAME' || tagName === 'FRAME')) {      const s = src.toLowerCase();      if (s.startsWith('javascript:') || s.startsWith('data:')) {        try {          blocker.install(target.contentWindow);        }        catch (e) {}      }    }  };  blocker.onclick = e =&gt; {    const a = e.target.closest('[target]') || e.target.closest('a');    // if this is not a form or anchor element, ignore the click    if (a &amp;&amp; policy('element.click', a, e).block) {      blocker.onclick.pointer.apply(e);      return true;    }  };  blocker.onclick.pointer = MouseEvent.prototype.preventDefault;  blocker.install = (w = window) =&gt; {    if (script.dataset.enabled === 'false' || protected.has(w)) {      return;    }    const d = w.document;    protected.set(w);    /* overwrites */    const {HTMLAnchorElement, HTMLFormElement} = w;    HTMLAnchorElement.prototype.click = new Proxy(HTMLAnchorElement.prototype.click, {      apply(target, self, args) {        const {block} = policy('dynamic.a.click', self);        return block ? undefined : Reflect.apply(target, self, args);      }    });    HTMLAnchorElement.prototype.dispatchEvent = new Proxy(HTMLAnchorElement.prototype.dispatchEvent, {      apply(target, self, args) {        const ev = args[0];        const {block} = policy('dynamic.a.dispatch', self, ev);        return block ? false : Reflect.apply(target, self, args);      }    });    HTMLFormElement.prototype.submit = new Proxy(HTMLFormElement.prototype.submit, {      apply(target, self, args) {        const {block} = policy('dynamic.form.submit', self);        return block ? false : Reflect.apply(target, self, args);      }    });    HTMLFormElement.prototype.dispatchEvent = new Proxy(HTMLFormElement.prototype.dispatchEvent, {      apply(target, self, args) {        const {block} = policy('dynamic.form.dispatch', self);        return block ? false : Reflect.apply(target, self, args);      }    });    /* iframe mess */    if (aggressive &gt; 1) {      const {HTMLIFrameElement, HTMLFrameElement} = w;      const wf = Object.getOwnPropertyDescriptor(HTMLFrameElement.prototype, 'contentWindow');      Object.defineProperty(HTMLFrameElement.prototype, 'contentWindow', {        configurable: true,        enumerable: true,        get: function() {          const w = wf.get.call(this);          try {            blocker.install(w);          }          catch (e) {}          return w;        }      });      const wif = Object.getOwnPropertyDescriptor(HTMLIFrameElement.prototype, 'contentWindow');      Object.defineProperty(HTMLIFrameElement.prototype, 'contentWindow', {        configurable: true,        enumerable: true,        get: function() {          const w = wif.get.call(this);          try {            blocker.install(w);          }          catch (e) {}          return w;        }      });      const cf = Object.getOwnPropertyDescriptor(HTMLFrameElement.prototype, 'contentDocument');      Object.defineProperty(HTMLFrameElement.prototype, 'contentDocument', {        configurable: true,        enumerable: true,        get: function() {          const d = cf.get.call(this);          try {            blocker.install(d.defaultView);          }          catch (e) {}          return d;        }      });      const cif = Object.getOwnPropertyDescriptor(HTMLIFrameElement.prototype, 'contentDocument');      Object.defineProperty(HTMLIFrameElement.prototype, 'contentDocument', {        configurable: true,        enumerable: true,        get: function() {          const d = cif.get.call(this);          try {            blocker.install(d.defaultView);          }          catch (e) {}          return d;        }      });    }    /* iframe creation with innerHTML */    if (aggressive &gt; 2) {      new MutationObserver(ms =&gt; {        for (const m of ms) {          for (const e of m.addedNodes) {            blocker.frame(e);            if (e.childElementCount) {              [...e.querySelectorAll('iframe')].forEach(blocker.frame);            }          }        }      }).observe(d, {childList: true, subtree: true});    }    /* click */    d.addEventListener('click', blocker.onclick, true); // with capture;    /* window.open */    w.open = new Proxy(w.open, {      apply(target, self, args) {        const {id, block} = policy('window.open', {          href: args.length ? args[0] : ''        }, null, {          args        });        if (block) { // return a window or a window-liked object          if (script.dataset.shadow === 'true') {            const iframe = document.createElement('iframe');            iframe.style.display = 'none';            document.body.appendChild(iframe);            return iframe.contentWindow;          }          else {            return simulate('self', window, id);          }        }        return Reflect.apply(target, self, args);      }    });    /* DOM replacement (document.open removes all the DOM listeners) */    let dHTML = d.documentElement;    d.write = new Proxy(d.write, {      apply(target, self, args) {        const r = Reflect.apply(target, self, args);        if (dHTML !== self.documentElement) {          dHTML = self.documentElement;          self.addEventListener('click', blocker.onclick, true);        }        return r;      }    });  };  blocker.remove = (w = window, d = document) =&gt; {    if (script.dataset.enabled === 'false' &amp;&amp; protected.has(w)) {      protected.delete(w);      d.removeEventListener('click', blocker.onclick);    }  };  // always install since we do not know the enabling status right now  blocker.install();  // receive configure  new MutationObserver(() =&gt; {    blocker[script.dataset.enabled === 'false' ? 'remove' : 'install']();  }).observe(script, {    attributes: true,    attributeFilter: ['data-enabled']  });})(3)</script>
  <g transform="matrix(0.886503, 0, 0, 0.886503, -266.626404, -104.863518)">
    <title>Se SK</title>
    <path style="fill: rgb(247, 175, 14); stroke: rgb(247, 175, 14);" d="M 311.522 158.529 L 301.89 170.708 L 307.303 170.787 L 313.512 162.589 L 330.147 162.748 L 336.515 170.787 L 341.371 170.708 L 331.899 158.927 L 336.436 157.892 C 337.178 157.6 339.045 151.587 339.062 150.331 L 339.221 124.302 C 339.227 122.416 336.88 119.06 335.003 118.89 L 309.691 118.81 C 307.888 118.735 304.598 121.044 304.517 123.268 L 304.437 149.853 C 304.543 151.127 306.772 157.574 307.223 157.654 L 311.522 158.529 Z"/>
    <circle style="fill: rgb(255, 255, 255);" transform="matrix(1, 0, 0, 1.000001, -486.107269, -296.499054)" cx="798" cy="448.5" r="2.75"/>
    <circle style="stroke-linecap: round; fill: rgb(255, 255, 255);" transform="matrix(1, 0, 0, 1.000001, -466.18866, -296.480103)" cx="798" cy="448.5" r="2.75"/>
    <path style="stroke-linecap: round; stroke: rgb(255, 255, 255); fill: rgb(255, 255, 255);" d="M 307.643 125.032 C 307.643 123.386 308.769 122.336 310.194 122.257 L 332.623 122.257 C 334.22 122.385 335.921 122.785 335.924 124.732 L 336.074 137.41 C 330.823 152.978 312.744 152.478 307.793 137.635 L 307.643 125.032 Z"/>
    <path d="M 309.17 134.516 L 312.123 134.229 C 312.301 135.22 312.661 135.948 313.205 136.413 C 313.748 136.878 314.481 137.11 315.404 137.11 C 316.381 137.11 317.118 136.903 317.614 136.49 C 318.109 136.076 318.357 135.592 318.357 135.039 C 318.357 134.684 318.253 134.381 318.045 134.131 C 317.836 133.882 317.472 133.665 316.953 133.48 C 316.597 133.357 315.786 133.139 314.522 132.824 C 312.895 132.421 311.754 131.925 311.098 131.337 C 310.174 130.51 309.713 129.501 309.713 128.312 C 309.713 127.547 309.93 126.831 310.364 126.164 C 310.798 125.497 311.423 124.99 312.241 124.641 C 313.057 124.292 314.043 124.118 315.199 124.118 C 317.085 124.118 318.506 124.532 319.46 125.359 C 320.413 126.186 320.914 127.29 320.962 128.671 L 317.927 128.804 C 317.797 128.032 317.518 127.477 317.091 127.138 C 316.663 126.8 316.022 126.631 315.168 126.631 C 314.286 126.631 313.596 126.812 313.097 127.174 C 312.775 127.407 312.615 127.718 312.615 128.107 C 312.615 128.462 312.765 128.767 313.066 129.02 C 313.448 129.341 314.378 129.676 315.855 130.025 C 317.331 130.374 318.423 130.734 319.131 131.106 C 319.839 131.479 320.393 131.988 320.793 132.634 C 321.192 133.28 321.392 134.078 321.392 135.029 C 321.392 135.89 321.153 136.697 320.675 137.448 C 320.196 138.2 319.519 138.759 318.644 139.125 C 317.769 139.491 316.679 139.674 315.373 139.674 C 313.473 139.674 312.013 139.235 310.995 138.356 C 309.976 137.477 309.368 136.197 309.17 134.516 Z M 326.828 139.407 L 326.828 126.918 L 322.367 126.918 L 322.367 124.375 L 334.313 124.375 L 334.313 126.918 L 329.863 126.918 L 329.863 139.407 L 326.828 139.407 Z" style="fill: rgb(51, 51, 51); white-space: pre;"/>
  </g>
</svg>