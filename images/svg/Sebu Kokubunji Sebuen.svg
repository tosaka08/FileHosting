<?xml version="1.0" encoding="utf-8"?>
<svg viewBox="0 0 37 47" xmlns="http://www.w3.org/2000/svg">
  <script>((aggressive = 3) =&gt; {  const script = document.currentScript;  script.dataset.injected = true;  const post = (name, detail) =&gt; script.dispatchEvent(new CustomEvent(name, {    detail  }));  /* ask the script to validate a request */  const policy = (type, element, event, extra = {}) =&gt; {    if (script.dataset.enabled === 'false') {      return {        block: false      };    }    if (event) {      extra.defaultPrevented = event.defaultPrevented;      extra.metaKey = event.metaKey;      extra.button = event.button || 0;      extra.isTrusted = event.isTrusted;    }    post('policy', {      type,      href: element.action || element.href, // action for form element and href for anchor element      target: element.target,      ...extra    });    return {      id: script.getAttribute('eid'),      block: script.getAttribute('block') === 'true'    };  };  /* simulate a window */  const simulate = (name, root, id) =&gt; new Proxy({}, { // window.location.replace    get(obj, key) {      return typeof root[key] === 'function' ? function(...args) {        post('record', {          id,          name,          method: root[key].name || key, // window.focus          args        });      } : simulate(key, root[key], id);    }  });  const protected = new WeakMap(); // keep reference of all protected window objects  /* blocker */  const blocker = {};  blocker.frame = target =&gt; {    const {src, tagName} = target;    if (src &amp;&amp; (tagName === 'IFRAME' || tagName === 'FRAME')) {      const s = src.toLowerCase();      if (s.startsWith('javascript:') || s.startsWith('data:')) {        try {          blocker.install(target.contentWindow);        }        catch (e) {}      }    }  };  blocker.onclick = e =&gt; {    const a = e.target.closest('[target]') || e.target.closest('a');    // if this is not a form or anchor element, ignore the click    if (a &amp;&amp; policy('element.click', a, e).block) {      blocker.onclick.pointer.apply(e);      return true;    }  };  blocker.onclick.pointer = MouseEvent.prototype.preventDefault;  blocker.install = (w = window) =&gt; {    if (script.dataset.enabled === 'false' || protected.has(w)) {      return;    }    const d = w.document;    protected.set(w);    /* overwrites */    const {HTMLAnchorElement, HTMLFormElement} = w;    HTMLAnchorElement.prototype.click = new Proxy(HTMLAnchorElement.prototype.click, {      apply(target, self, args) {        const {block} = policy('dynamic.a.click', self);        return block ? undefined : Reflect.apply(target, self, args);      }    });    HTMLAnchorElement.prototype.dispatchEvent = new Proxy(HTMLAnchorElement.prototype.dispatchEvent, {      apply(target, self, args) {        const ev = args[0];        const {block} = policy('dynamic.a.dispatch', self, ev);        return block ? false : Reflect.apply(target, self, args);      }    });    HTMLFormElement.prototype.submit = new Proxy(HTMLFormElement.prototype.submit, {      apply(target, self, args) {        const {block} = policy('dynamic.form.submit', self);        return block ? false : Reflect.apply(target, self, args);      }    });    HTMLFormElement.prototype.dispatchEvent = new Proxy(HTMLFormElement.prototype.dispatchEvent, {      apply(target, self, args) {        const {block} = policy('dynamic.form.dispatch', self);        return block ? false : Reflect.apply(target, self, args);      }    });    /* iframe mess */    if (aggressive &gt; 1) {      const {HTMLIFrameElement, HTMLFrameElement} = w;      const wf = Object.getOwnPropertyDescriptor(HTMLFrameElement.prototype, 'contentWindow');      Object.defineProperty(HTMLFrameElement.prototype, 'contentWindow', {        configurable: true,        enumerable: true,        get: function() {          const w = wf.get.call(this);          try {            blocker.install(w);          }          catch (e) {}          return w;        }      });      const wif = Object.getOwnPropertyDescriptor(HTMLIFrameElement.prototype, 'contentWindow');      Object.defineProperty(HTMLIFrameElement.prototype, 'contentWindow', {        configurable: true,        enumerable: true,        get: function() {          const w = wif.get.call(this);          try {            blocker.install(w);          }          catch (e) {}          return w;        }      });      const cf = Object.getOwnPropertyDescriptor(HTMLFrameElement.prototype, 'contentDocument');      Object.defineProperty(HTMLFrameElement.prototype, 'contentDocument', {        configurable: true,        enumerable: true,        get: function() {          const d = cf.get.call(this);          try {            blocker.install(d.defaultView);          }          catch (e) {}          return d;        }      });      const cif = Object.getOwnPropertyDescriptor(HTMLIFrameElement.prototype, 'contentDocument');      Object.defineProperty(HTMLIFrameElement.prototype, 'contentDocument', {        configurable: true,        enumerable: true,        get: function() {          const d = cif.get.call(this);          try {            blocker.install(d.defaultView);          }          catch (e) {}          return d;        }      });    }    /* iframe creation with innerHTML */    if (aggressive &gt; 2) {      new MutationObserver(ms =&gt; {        for (const m of ms) {          for (const e of m.addedNodes) {            blocker.frame(e);            if (e.childElementCount) {              [...e.querySelectorAll('iframe')].forEach(blocker.frame);            }          }        }      }).observe(d, {childList: true, subtree: true});    }    /* click */    d.addEventListener('click', blocker.onclick, true); // with capture;    /* window.open */    w.open = new Proxy(w.open, {      apply(target, self, args) {        const {id, block} = policy('window.open', {          href: args.length ? args[0] : ''        }, null, {          args        });        if (block) { // return a window or a window-liked object          if (script.dataset.shadow === 'true') {            const iframe = document.createElement('iframe');            iframe.style.display = 'none';            document.body.appendChild(iframe);            return iframe.contentWindow;          }          else {            return simulate('self', window, id);          }        }        return Reflect.apply(target, self, args);      }    });    /* DOM replacement (document.open removes all the DOM listeners) */    let dHTML = d.documentElement;    d.write = new Proxy(d.write, {      apply(target, self, args) {        const r = Reflect.apply(target, self, args);        if (dHTML !== self.documentElement) {          dHTML = self.documentElement;          self.addEventListener('click', blocker.onclick, true);        }        return r;      }    });  };  blocker.remove = (w = window, d = document) =&gt; {    if (script.dataset.enabled === 'false' &amp;&amp; protected.has(w)) {      protected.delete(w);      d.removeEventListener('click', blocker.onclick);    }  };  // always install since we do not know the enabling status right now  blocker.install();  // receive configure  new MutationObserver(() =&gt; {    blocker[script.dataset.enabled === 'false' ? 'remove' : 'install']();  }).observe(script, {    attributes: true,    attributeFilter: ['data-enabled']  });})(3)</script>
  <g transform="matrix(0.886503, 0, 0, 0.886503, -266.626404, -104.863518)">
    <title>Se SK</title>
    <path style="fill: rgb(30, 173, 76); stroke: rgb(30, 173, 76);" d="M 311.522 158.529 L 301.89 170.708 L 307.303 170.787 L 313.512 162.589 L 330.147 162.748 L 336.515 170.787 L 341.371 170.708 L 331.899 158.927 L 336.436 157.892 C 337.178 157.6 339.045 151.587 339.062 150.331 L 339.221 124.302 C 339.227 122.416 336.88 119.06 335.003 118.89 L 309.691 118.81 C 307.888 118.735 304.598 121.044 304.517 123.268 L 304.437 149.853 C 304.543 151.127 306.772 157.574 307.223 157.654 L 311.522 158.529 Z"/>
    <circle style="fill: rgb(255, 255, 255);" transform="matrix(1, 0, 0, 1.000001, -486.107269, -296.499054)" cx="798" cy="448.5" r="2.75"/>
    <circle style="stroke-linecap: round; fill: rgb(255, 255, 255);" transform="matrix(1, 0, 0, 1.000001, -466.18866, -296.480103)" cx="798" cy="448.5" r="2.75"/>
    <path style="stroke-linecap: round; stroke: rgb(255, 255, 255); fill: rgb(255, 255, 255);" d="M 307.643 125.032 C 307.643 123.386 308.769 122.336 310.194 122.257 L 332.623 122.257 C 334.22 122.385 335.921 122.785 335.924 124.732 L 336.074 137.41 C 330.823 152.978 312.744 152.478 307.793 137.635 L 307.643 125.032 Z"/>
    <path d="M 308.993 134.387 L 311.84 134.11 C 312.011 135.065 312.359 135.767 312.884 136.216 C 313.408 136.664 316.657 136.689 317.135 136.29 C 317.613 135.891 317.852 135.425 317.852 134.891 C 317.852 134.548 317.752 134.257 317.551 134.016 C 317.35 133.775 316.998 133.566 316.497 133.388 C 316.154 133.269 315.373 133.058 314.154 132.755 C 312.585 132.366 311.485 131.888 310.852 131.321 C 309.962 130.524 309.517 129.552 309.517 128.405 C 309.517 127.666 309.726 126.976 310.145 126.333 C 310.563 125.69 311.166 125.201 311.954 124.865 C 312.742 124.528 313.693 124.36 314.807 124.36 C 316.626 124.36 317.996 124.759 318.915 125.557 C 319.834 126.354 320.317 127.419 320.364 128.751 L 317.437 128.879 C 317.312 128.134 317.043 127.599 316.631 127.272 C 316.219 126.946 315.601 126.783 314.777 126.783 C 313.927 126.783 313.261 126.958 312.78 127.307 C 312.47 127.531 312.315 127.831 312.315 128.207 C 312.315 128.55 312.46 128.843 312.75 129.087 C 313.119 129.396 314.016 129.719 315.439 130.056 C 316.863 130.392 317.916 130.74 318.599 131.099 C 319.281 131.458 319.815 131.949 320.2 132.572 C 320.586 133.195 320.779 133.965 320.779 134.881 C 320.779 135.712 320.548 136.489 320.087 137.214 C 319.626 137.939 318.973 138.478 318.129 138.831 C 317.285 139.184 316.234 139.36 314.975 139.36 C 313.142 139.36 311.735 138.937 310.753 138.09 C 309.77 137.243 309.184 136.008 308.993 134.387 Z M 323.15 139.103 L 326.077 139.103 L 323.15 139.103 Z" style="fill: rgb(51, 51, 51); white-space: pre;"/>
    <path d="M 322.35 139.088 L 322.35 124.772 L 325.142 124.772 L 325.142 131.129 L 330.783 124.772 L 334.536 124.772 L 329.33 130.348 L 334.819 139.088 L 331.207 139.088 L 327.406 132.369 L 325.142 134.762 L 325.142 139.088 L 322.35 139.088 Z" style="fill: rgb(51, 51, 51); white-space: pre;"/>
  </g>
</svg>